(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{181:function(i,a,v){"use strict";v.r(a);var e=v(0),t=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var i=this,a=i.$createElement,v=i._self._c||a;return v("div",{staticClass:"content"},[v("h1",{attrs:{id:"python"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#python","aria-hidden":"true"}},[i._v("#")]),i._v(" Python")]),i._v(" "),v("blockquote",[v("p",[i._v("这篇文章主要功能暂定为一个通俗易懂的功能字典")])]),i._v(" "),v("div",{staticClass:"warning custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("WARNING")]),i._v(" "),v("p",[i._v("普通的变量声明和简单的语法及循环等这里不再赘述")])]),i._v(" "),v("h2",{attrs:{id:"几个操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#几个操作","aria-hidden":"true"}},[i._v("#")]),i._v(" 几个操作")]),i._v(" "),v("ul",[v("li",[i._v("多变量声明：a,b,c = 1,2,3")]),i._v(" "),v("li",[i._v("取幂：**  如 2**3 = 8")]),i._v(" "),v("li",[i._v("取整商：// 如 10//4 = 2")])]),i._v(" "),v("hr"),i._v(" "),v("h2",{attrs:{id:"python-中常用的数据结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#python-中常用的数据结构","aria-hidden":"true"}},[i._v("#")]),i._v(" Python 中常用的数据结构")]),i._v(" "),v("ul",[v("li",[i._v("元组 ()")]),i._v(" "),v("li",[i._v("列表 []")]),i._v(" "),v("li",[i._v("字典 {}")])]),i._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("TIP")]),i._v(" "),v("p",[i._v('两个元组（列表） 可以通过 "+" 操作符连接\n一个元组（列表） 可以通过 "*" 操作符复制')])]),i._v(" "),v("h2",{attrs:{id:"切片"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#切片","aria-hidden":"true"}},[i._v("#")]),i._v(" 切片")]),i._v(" "),v("p",[i._v('切出一个左闭右开的区间\n如："abcdefg"[2:4] 返回的是 "cd"')]),i._v(" "),v("ul",[v("li",[i._v("[x:] 表示从第 x 个到最后一个")]),i._v(" "),v("li",[i._v("[:y] 表示从第 0 个到第 y-1 个")])]),i._v(" "),v("h2",{attrs:{id:"步长"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#步长","aria-hidden":"true"}},[i._v("#")]),i._v(" 步长")]),i._v(" "),v("p",[i._v('规定切片之间间隔的变量个数\n如 "abcdefg"[1:4:2] 返回的是 "bd"\n解释：[1:4] 切出来的是 "bcde" 从这个结果中第 0 个开始，每隔 1 个取一个')]),i._v(" "),v("h2",{attrs:{id:"删除列表-列表元素"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#删除列表-列表元素","aria-hidden":"true"}},[i._v("#")]),i._v(" 删除列表 / 列表元素")]),i._v(" "),v("p",[i._v("使用 del 语句")]),i._v(" "),v("ul",[v("li",[i._v("del list[1] 删除列表中第一个元素")]),i._v(" "),v("li",[i._v("del list[2:4] 删除列表中第三和第四个元素")]),i._v(" "),v("li",[i._v("del list 删除这个列表，这个变量没有任何指向了")])]),i._v(" "),v("h2",{attrs:{id:"列表常用函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#列表常用函数","aria-hidden":"true"}},[i._v("#")]),i._v(" 列表常用函数")]),i._v(" "),v("ul",[v("li",[i._v("len() 返回列表长度")]),i._v(" "),v("li",[i._v("max() 返回列表中最大值")]),i._v(" "),v("li",[i._v("min() 返回列表中最小值")]),i._v(" "),v("li",[i._v("sum() 返回列表的和")]),i._v(" "),v("li",[i._v("sorted() 对一个列表进行排序，返回排序的结果，不改变被排序的列表")])]),i._v(" "),v("h2",{attrs:{id:"列表常用方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#列表常用方法","aria-hidden":"true"}},[i._v("#")]),i._v(" 列表常用方法")]),i._v(" "),v("ul",[v("li",[i._v(".index(value) 求列表中第一次出现值为 value 元素的索引，不存在会报错")]),i._v(" "),v("li",[i._v(".count(value) 求列表中出现了几次值为 value 的元素")]),i._v(" "),v("li",[i._v(".remove(value) 移除列表中值为 value 的元素，有多个只会移除第一个，没有该值会报错")]),i._v(" "),v("li",[i._v(".append(value) 在列表末尾添加一个值为 value 的元素，即使这个元素时一个列表，也会作为一个元素添加进去")]),i._v(" "),v("li",[i._v(".extend(value) 可以用来添加多个元素，如果 value 是一个列表，则会将这个两个列表拼起来")]),i._v(" "),v("li",[i._v(".clear() 删除列表中所有元素")]),i._v(" "),v("li",[i._v(".insert(position,value) 在索引为 Position 的地方插入 value")]),i._v(" "),v("li",[i._v(".copy() 复制一个列表，仅仅是值传递，不是引用传递")]),i._v(" "),v("li",[i._v(".sort() 对一个列表进行排序，如果括号内写 reverse=True 则会方向排序，默认对数字从小到大，对字母按照字典顺序排列")])]),i._v(" "),v("h2",{attrs:{id:"生成器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#生成器","aria-hidden":"true"}},[i._v("#")]),i._v(" 生成器")]),i._v(" "),v("ul",[v("li",[i._v('range() 生成一个左闭右开的区间，左边的数缺省是 0, 参数间隔和切片不同，使用",", 可以设定步长 生成的结果可以强转为列表或者元组')])]),i._v(" "),v("h2",{attrs:{id:"格式化输出"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#格式化输出","aria-hidden":"true"}},[i._v("#")]),i._v(" 格式化输出")]),i._v(" "),v("ul",[v("li",[i._v("%i 表示整数")]),i._v(" "),v("li",[i._v("%c 表示字符")]),i._v(" "),v("li",[i._v("%u 表示无符号整数")]),i._v(" "),v("li",[i._v("%o 表示八进制")]),i._v(" "),v("li",[i._v("%d 表示十进制")]),i._v(" "),v("li",[i._v("%x 表示十六进制")]),i._v(" "),v("li",[i._v("%s 表示字符串\n"),v("ul",[v("li",[i._v("%10s 表示右对齐输出，占位符 10 位（占位符个数可以更改，占位符为空格符）")]),i._v(" "),v("li",[i._v("%-10s 表示左对齐输出，占位符 10 位")]),i._v(" "),v("li",[i._v("%.2s 截取字符串起始两位")])])]),i._v(" "),v("li",[i._v("%e 表示科学计数法")]),i._v(" "),v("li",[i._v("%g 自动识别，比较简单用浮点数，比较复杂用科学计数法")]),i._v(" "),v("li",[i._v("多个参数时，采用 %(str1,str2) 的格式")])]),i._v(" "),v("blockquote",[v("p",[i._v('a = "hello python"\nprint("%s" % a)\n输出：hello python')])]),i._v(" "),v("ul",[v("li",[i._v("使用{} 和 .format() format() 参数为一个元组，{}内可以加一个索引，如果没有索引的时候{}的数量必须和元组长度一样，当{}内为一个变量名时，format() 参数为一条赋值语句。")])]),i._v(" "),v("blockquote",[v("p",[i._v('如 print(\'今天如何{}昨天{}\'.format(", 好，",". 不好。"))\nprint("今天{how}".format(how = \'好\'))')])]),i._v(" "),v("h2",{attrs:{id:"字符串常用方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字符串常用方法","aria-hidden":"true"}},[i._v("#")]),i._v(" 字符串常用方法")]),i._v(" "),v("ul",[v("li",[i._v('.replace("oldString","newString"[,count]) count 表示要替换的个数，返回值为结果字符串，不会改变源字符串')]),i._v(" "),v("li",[i._v('.split("symbol") 用指定符号将字符串切割成列表')])]),i._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("TIP")]),i._v(" "),v("p",[i._v("如果 split() 中不传入任何参数，则会以空格切割")])]),i._v(" "),v("div",{staticClass:"danger custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("WARNING")]),i._v(" "),v("p",[i._v("不能使用 split(''), 如果想将字符串中每一个字符都变成一个列表中的元素，应该使用 list() 函数强转字符串")])]),i._v(" "),v("ul",[v("li",[i._v("'symbol'.join(list/tuple) 将一个列表或者元组以指定分隔符合并成一个字符串")])]),i._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("TIP")]),i._v(" "),v("p",[i._v("这里可以使用空字符串进行合并")])]),i._v(" "),v("ul",[v("li",[i._v('.startswith("string") 检测该字符串是否以默认字符（串）开头，如果是则返回 True, 否则返回 False')]),i._v(" "),v("li",[i._v('.endswith("String") 检测该字符串是否以默认字符（串）结尾，如果是则返回 True, 否则返回 False')])]),i._v(" "),v("div",{staticClass:"warning custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("WARNING")]),i._v(" "),v("p",[i._v("这里是 startswith 而不是 startwith")])]),i._v(" "),v("ul",[v("li",[i._v(".upper() 返回一个新字符串，该字符串的值为源字符串转化成大写，不会改变源字符串")]),i._v(" "),v("li",[i._v(".lower() 返回一个新字符串，该字符串的值为源字符串转化成小写，不会改变源字符串")]),i._v(" "),v("li",[i._v(".swapcase() 返回一个新字符串，该字符串中大写字符为源字符串的小写字符，该字符串的小写字符为源字符串的大写字母，不会改变源字符串")]),i._v(" "),v("li",[i._v(".capitalize() 返回一个新字符串，新字符串和源字符串的区别为新字符串首字母大写，不会改变原字符串")]),i._v(" "),v("li",[i._v(".isnumeric() 判断该字符串是否全部由数字构成，如果是则返回 True, 否则返回 False")]),i._v(" "),v("li",[i._v(".isalpha() 判断该字符串是否全部为字符构成，如果是则返回 True, 否则返回 False")]),i._v(" "),v("li",[i._v(".isalnum() 判断该字符串是否全部由字符和数字构成，如果是则返回 True, 否则返回 False")]),i._v(" "),v("li",[i._v(".isspace() 判断该字符串是否全为空格，如果是则返回 True, 否则返回 False")]),i._v(" "),v("li",[i._v(".isdigit() 判断该字符串是否全为数字，如果是则返回 True, 否则返回 False")]),i._v(" "),v("li",[i._v(".strip() 去掉源字符串两端的空格并且返回一个新字符串，不会改变源字符串")]),i._v(" "),v("li",[i._v(".rstrip() 去掉源字符串右侧的空格并且返回一个新字符串，不会改变源字符串")]),i._v(" "),v("li",[i._v(".lstrip() 去掉源字符串左侧的空格并且返回一个新字符串，不会改变源字符串")])]),i._v(" "),v("h2",{attrs:{id:"字典"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字典","aria-hidden":"true"}},[i._v("#")]),i._v(" 字典")]),i._v(" "),v("p",[i._v("声明一个字典的常用方式：")]),i._v(" "),v("ul",[v("li",[i._v("直接赋值 如 dic = {'a':1,'b':2}")]),i._v(" "),v("li",[i._v("使用 dict()\n"),v("ul",[v("li",[i._v("使用 dict() 转化包含列表的列表：")])])])]),i._v(" "),v("blockquote",[v("p",[i._v("lst = [[1,2],[2,3],[3,4]]\ndic = dict(lst)\ndic : {1: 2, 2: 3, 3: 4}")])]),i._v(" "),v("ul",[v("li",[i._v("使用 dict() 快速赋值：")])]),i._v(" "),v("blockquote",[v("p",[i._v("dic = dict( m = 1,n = 2,h = 3)\nprint(dic)\ndic:{'m':1,'n':2','h':3}")])]),i._v(" "),v("ul",[v("li",[i._v("使用 dict.fromkeys(list[,value]) 函数")])]),i._v(" "),v("blockquote",[v("p",[i._v("list 为字典的键名，如果 value 没有指定，那么默认每一个元素的值都为 None")])]),i._v(" "),v("div",{staticClass:"warning custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("WARNING")]),i._v(" "),v("p",[i._v("字典的键名必须是不可变对象")])]),i._v(" "),v("p",[i._v("字典中常用的方法：")]),i._v(" "),v("ul",[v("li",[i._v(".get(key) 返回 key 所对应的值")])]),i._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("TIP")]),i._v(" "),v("p",[i._v("可以直接使用中括号语法访问")])]),i._v(" "),v("ul",[v("li",[i._v(".keys() 返回一个视图，其中包含所有 key 值，和 range 生成的结果结构类似")]),i._v(" "),v("li",[i._v(".values() 返回一个视图，其中包含所有 value 值，和 range 生成的结果结构类似")]),i._v(" "),v("li",[i._v(".items() 返回一个视图，其中包含所有项目，和 range 生成的结果结构类似")])]),i._v(" "),v("hr"),i._v(" "),v("h2",{attrs:{id:"函数声明"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数声明","aria-hidden":"true"}},[i._v("#")]),i._v(" 函数声明")]),i._v(" "),v("ul",[v("li",[i._v("def function_name（参数列表）:")]),i._v(" "),v("li",[i._v("默认值：直接在声明参数的时候，赋值即可 如 def a(x,y=10)")]),i._v(" "),v("li",[i._v('可变参数：使用 "*" 关键字 如 def a(*x) 这时候会将这个参数变成一个元组')])]),i._v(" "),v("h2",{attrs:{id:"python-层级概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#python-层级概念","aria-hidden":"true"}},[i._v("#")]),i._v(" python 层级概念")]),i._v(" "),v("ul",[v("li",[i._v("表达式 -> 创建，处理对象")]),i._v(" "),v("li",[i._v("语句 -> 包含表达式")]),i._v(" "),v("li",[i._v("逻辑单元 -> 函数或者类，由语句构成")]),i._v(" "),v("li",[i._v("模块 -> .py 代码文件组成模块")]),i._v(" "),v("li",[i._v("包 ->定义自己有关系的文件，或者模块（包可以想象成文件夹，模块可以想象成文件夹当中的模块）")]),i._v(" "),v("li",[i._v("程序 -> 若干个包 + 若干个模块")])]),i._v(" "),v("h2",{attrs:{id:"导入模块"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#导入模块","aria-hidden":"true"}},[i._v("#")]),i._v(" 导入模块")]),i._v(" "),v("ul",[v("li",[i._v("import modelname 导入指定模块")]),i._v(" "),v("li",[i._v("import modelname as simplename 在调用的时候可以简化书写")]),i._v(" "),v("li",[i._v("from modelname import functionname 导入部分模块（例如仅仅导入几个函数）")])]),i._v(" "),v("h2",{attrs:{id:"常用模块介绍"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常用模块介绍","aria-hidden":"true"}},[i._v("#")]),i._v(" 常用模块介绍")]),i._v(" "),v("ul",[v("li",[i._v("random\n"),v("ul",[v("li",[i._v("random.random() 返回一个 0 到 1 之间的随机浮点数")]),i._v(" "),v("li",[i._v("random.randint(a,b) 返回一个在 [a,b] 区间中的随机整数")]),i._v(" "),v("li",[i._v("random.choice(list/tuple) 返回指定列表（元组）中的随机一项")]),i._v(" "),v("li",[i._v("random.sample(list/tuple,numberOfResult) 返回一个指定元素个数的列表，列表中的元素为在指定的列表或者元组中随机选择的")]),i._v(" "),v("li",[i._v("random.shuffle(list) 将指定列表随机打乱，直接在源列表中操作，没有返回值")])])]),i._v(" "),v("li",[i._v("time\n"),v("ul",[v("li",[i._v("time.sleep(second)  暂停指定秒数（不是毫秒）")]),i._v(" "),v("li",[i._v("time.ctime() 返回当地时间，为字符串类型 如：'Sun May 19 16:00:58 2019'")]),i._v(" "),v("li",[i._v("time.localtime() 返回当前时区的时间，为一个视图 wday 0-6 分别表示周一到周天，yday 1-366 分别表示一年中的第几天")]),i._v(" "),v("li",[i._v('time.strftime("时间格式",time.localtime()) 返回当前指定格式的时间，为一个字符串，如 %Y-%m-%d %H:%M:%S 返回  年 - 月 - 日 时：分：秒')]),i._v(" "),v("li",[i._v("time.time() 返回当前毫秒数")])])])]),i._v(" "),v("h2",{attrs:{id:"文件读取"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#文件读取","aria-hidden":"true"}},[i._v("#")]),i._v(" 文件读取")]),i._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("TIP")]),i._v(" "),v("p",[i._v("多多注意文件指针的位置")])]),i._v(" "),v("ul",[v("li",[i._v("open(filePath,type[,encoding]) 返回一个类似 C 语言中文件指针的东西\n"),v("ul",[v("li",[i._v("filePath（记得转义）\n"),v("ul",[v("li",[i._v("绝对路径")]),i._v(" "),v("li",[i._v("相对路径")])])]),i._v(" "),v("li",[i._v("type 类型：\n"),v("ul",[v("li",[i._v("'r' 读取文件，默认")]),i._v(" "),v("li",[i._v("'w' 写入文件")]),i._v(" "),v("li",[i._v("'rw' 读写文件")]),i._v(" "),v("li",[i._v("'a' 追加")])])])])]),i._v(" "),v("li",[i._v("filePointer.read([number]) 读取文件所有内容，返回一个字符串，如果指定 Number 值，则会读取指定数量的字符")]),i._v(" "),v("li",[i._v("fielPointer.readline([number]) 读取文件一行，如果指定 number 值的话，则会读取该行的 number 个字符，第二次调用该函数的时候，如果该行没有读完，会继续读")]),i._v(" "),v("li",[i._v("filePointer.readlines() 读取文件中所有行，返回结果为一个列表，每一行就是列表中的一个元素，每一个元素以换行符结尾")]),i._v(" "),v("li",[i._v("filePointer.seek(number) 移动文件指针 0 表示起始位置")]),i._v(" "),v("li",[i._v("filePointer.close() 关闭文件")]),i._v(" "),v("li",[i._v("filePointer.write(string) 将指定内容写入文件中，记得要关闭文件")]),i._v(" "),v("li",[i._v("filePointer.writelines(list) 一行一行的写入文件，列表中必须是字符串型的数据，不会换行，直接把列表变成字符串，除非添加换行符")])]),i._v(" "),v("h2",{attrs:{id:"os-模块"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#os-模块","aria-hidden":"true"}},[i._v("#")]),i._v(" os 模块")]),i._v(" "),v("blockquote",[v("p",[i._v("提供了丰富的方法处理文件和目录\n使用方法：import os")])]),i._v(" "),v("ul",[v("li",[i._v("os.name 返回一个包含系统名字的字符串")]),i._v(" "),v("li",[i._v("os.getcwd() 返回一个字符串，其中包含当前文件绝对路径")]),i._v(" "),v("li",[i._v("os.listdir() 返回一个列表，其中包含当前文件的所有文件和目录名")]),i._v(" "),v("li",[i._v("os.chdir(newPath) 改变工作路径为指定工作路径")]),i._v(" "),v("li",[i._v("os.remove(filename) 删除指定文件")]),i._v(" "),v("li",[i._v("os.path.split(filePath) 返回一个元组，前者是文件目录，后者是文件名")]),i._v(" "),v("li",[i._v("os.path.exists(filePath) 返回一个布尔值，判断一个文件是否存在")])]),i._v(" "),v("h2",{attrs:{id:"pickle-模块"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#pickle-模块","aria-hidden":"true"}},[i._v("#")]),i._v(" pickle 模块")]),i._v(" "),v("blockquote",[v("p",[i._v("提供了一个简单的持久化功能，可以将对象以文件的形式存放在磁盘中\n提供了基本数据的序列化和反序列化\n通过序列化操作可以将程序运行中的对象信息保存在文件中，永久储存\n通过反序列化操作，可以从文件中创建上一次程序保存的对象")])]),i._v(" "),v("div",{staticClass:"warning custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("WARNING")]),i._v(" "),v("p",[i._v("写入方式不是'w' 而是 'wb'; 读取方式不是'r' 而是 'rb'")])]),i._v(" "),v("ul",[v("li",[i._v("pickle.dump(string,filepath) 将数据储存进 .pkl 文件")]),i._v(" "),v("li",[i._v("pickle.load(filepath) 返回 file 中的数据")])]),i._v(" "),v("h2",{attrs:{id:"numpy-模块"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#numpy-模块","aria-hidden":"true"}},[i._v("#")]),i._v(" numpy 模块")]),i._v(" "),v("blockquote",[v("p",[i._v("开源强大的科学计算工具包\n与列表的直观区别：输出的时候元素之间没有','号")])]),i._v(" "),v("ul",[v("li",[i._v("创建 numpy 数组\n"),v("ul",[v("li",[i._v("numpy.array(list/range()) 通过一个 list 或者视图返回一个数组")]),i._v(" "),v("li",[i._v("numpy.arange(number) 直接调用内置方法返回一个数组，和 range 用法类似")])])])]),i._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("TIP")]),i._v(" "),v("p",[i._v("对数组直接进行加减乘除操作就相当于对数组中的每一项进行该操作")])]),i._v(" "),v("ul",[v("li",[v("p",[i._v("数组常用属性：")]),i._v(" "),v("ul",[v("li",[i._v(".ndim 返回数组的维度")]),i._v(" "),v("li",[i._v(".shape 返回一个元组，其中包含数组的列数和行数")]),i._v(" "),v("li",[i._v(".size 返回数组中元素的个数")]),i._v(" "),v("li",[i._v(".dtype 返回数组中元素的数据类型")]),i._v(" "),v("li",[i._v(".itemsize 返回数组中元素的字节大小")]),i._v(" "),v("li",[i._v(".data 返回数组在缓存区中的位置")])])]),i._v(" "),v("li",[v("p",[i._v("数组常用方法：")]),i._v(" "),v("ul",[v("li",[i._v(".mean() 返回数组中所有元素取平均值的结果")]),i._v(" "),v("li",[i._v(".sum() 返回数组中所有元素加起来的值")]),i._v(" "),v("li",[i._v(".reshape(shape) 返回重置形状之后的数组，不改变原数组，但是不能改变元素个数")])])])]),i._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("TIP")]),i._v(" "),v("p",[i._v("这里的 shape 就是一个有序数对，假如说使用 array.reshape(2,5) 就是将这个数组变成一个两行五列的数组")])]),i._v(" "),v("ul",[v("li",[v("p",[i._v(".resize(shape) 直接修改原数组的形状")])]),i._v(" "),v("li",[v("p",[i._v(".T 返回一个数组的转置，不改变原数组")])]),i._v(" "),v("li",[v("p",[i._v(".astype(type) 修改数组中元素的类型")]),i._v(" "),v("ul",[v("li",[i._v("numpy.int64")]),i._v(" "),v("li",[i._v("numpy.str")]),i._v(" "),v("li",[i._v("numpy.float")]),i._v(" "),v("li",[i._v("numpy.int32")])])]),i._v(" "),v("li",[v("p",[i._v("数组常用函数：")]),i._v(" "),v("ul",[v("li",[i._v("numpy.resize(array,shape) 返回一个新数组，为原数组指定形状转化后得到，如果新数组的元素个数比原数组少，则直接删除，如果比原数组多，那么就按照原数组中的数据从小到大的顺序填充到新数组当中")]),i._v(" "),v("li",[i._v("numpy.linspace（开始的数字大小，结束的数字大小，样本的个数，endpoint=True/False,restep=True/False) 返回在间隔 【开始，停止】 上计算的指定个均匀间隔的样本数组 （是一个闭区间所以会多一个） endpoint 是否包含结束数字大小的值  如果 restep 设置为 true, 会返回一个包含两个元素的元组，其中的第一个元素为数组，第二个元素为步长")]),i._v(" "),v("li",[i._v("numpy.zeros(shape,dtype) 返回一个指定形状的用 0 填充的数组，默认数据类型为浮点型，可以自定义当中的数据类型（如果定义为字符型的话，数组中的每一个元素都是空字符串）")]),i._v(" "),v("li",[i._v("numpy.zeros_like(array) 返回一个和另一个数组形状相同的用 0 填充的数组")]),i._v(" "),v("li",[i._v("numpy.ones() 同上 numpy.zeros()")]),i._v(" "),v("li",[i._v("numpy.ones_like() 同上 numpy.zeros_like()")]),i._v(" "),v("li",[i._v("numpy.eye(number) 返回一个方阵，大小为 number 的值，对角线上为 1, 其余位置值为 0")]),i._v(" "),v("li",[i._v("numpy.random.rand(shape) 返回指定形状的数组，其中每一个元素都是从 0 到 1 随机取值，均匀分布")]),i._v(" "),v("li",[i._v("numpy.random.normal(size=shape) 返回一个自定形状的正太分布的数组")])])])]),i._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("TIP")]),i._v(" "),v("p",[i._v("如果想创建一个 2X3 大小的我们应该写 numpy.random.normal(size=(2,3))")])]),i._v(" "),v("ul",[v("li",[v("p",[i._v("numpy.random.randn(shape) 返回一个指定形状的正太分布数组")])]),i._v(" "),v("li",[v("p",[i._v("numpy.random.randint(low,high[,size=shape,dtype=]) 返回一个左闭右开的区间上的随机数组，大小可以指定")])]),i._v(" "),v("li",[v("p",[i._v('numpy.savetxt(filename,arrayname,fmt= 存储类型，delimiter= 分隔符，newline="\\n",header="",footer="",comments="#") 将指定数组存入指定文件中')])]),i._v(" "),v("li",[v("p",[i._v("numpy.loadtxt(filename,delimiter= 分隔符） 返回一个数组")])]),i._v(" "),v("li",[v("p",[i._v("numpy.save('filename.npy',array) 储存一个数组格式的文件")])]),i._v(" "),v("li",[v("p",[i._v("numpy.load(filename) 返回一个数组")])]),i._v(" "),v("li",[v("p",[i._v("numpy.nan 返回 nan")])]),i._v(" "),v("li",[v("p",[i._v("布尔数组")]),i._v(" "),v("ul",[v("li",[i._v("布尔数组可以用来提取数组中想要的元素")]),i._v(" "),v("li",[i._v("布尔数组可以直接创建，也可以直接用一个已有的数组进行逻辑判断获得 如：\narr = [[1 2 3 4]\n[2 4 5 9]]\narr>5 返回：\n[False False False False]\n[False False False True]")])])])]),i._v(" "),v("div",{staticClass:"danger custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("WARNING")]),i._v(" "),v("p",[i._v("这里判断后返回的是一个一维数组，不会保留数组原始结构")])]),i._v(" "),v("blockquote",[v("p",[i._v("如果想要获得 array 中所有大于 5 的值，可以使用 array[[array>5]] 或者 array[array>5]\n解释：相当于用 array>5 这个布尔数组每一个元素的值来一一对应是否输出 array 数组中的元素")])]),i._v(" "),v("ul",[v("li",[i._v("多维数组访问\n"),v("ul",[v("li",[i._v("array"),v("a",{attrs:{href:"b"}},[i._v("a")]),i._v("= array[a,b]")])])])]),i._v(" "),v("h2",{attrs:{id:"pandas-模块"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#pandas-模块","aria-hidden":"true"}},[i._v("#")]),i._v(" pandas 模块")]),i._v(" "),v("h3",{attrs:{id:"_1-series"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-series","aria-hidden":"true"}},[i._v("#")]),i._v(" 1. series")]),i._v(" "),v("blockquote",[v("p",[i._v("series 数据结构：带有标签的一维数组，可以保存任何数据类型，标签统称为索引（索引可以为数字，字符等）")])]),i._v(" "),v("div",{staticClass:"danger custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("WARNING")]),i._v(" "),v("p",[i._v("series 是一个一维数组")])]),i._v(" "),v("ul",[v("li",[i._v("series 创建方法\n"),v("ul",[v("li",[i._v("由字典创建 pandas.Series(dict)")]),i._v(" "),v("li",[i._v("由一维数组创建 pandas.Series(array)")]),i._v(" "),v("li",[i._v("通过标量创建 如 pandas.Series(100,index=range(5)) 创建一个索引为 0 到 4 的五个元素组成的 series, 每一个元素的值都是 100")])])])]),i._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("TIP")]),i._v(" "),v("p",[i._v("括号内可选参数：dtype,name,index")])]),i._v(" "),v("ul",[v("li",[i._v("索引使用：（可以不唯一，但尽量避免）\n"),v("ul",[v("li",[i._v("下标索引（不能使用 -1)")]),i._v(" "),v("li",[i._v("标签索引 当指定索引时，如果使用字符当索引，可以直接通过字符检索，如果想要选出多个值，可以是用 [[]], 如 series[['a','b']]")]),i._v(" "),v("li",[i._v("切片索引 当使用下标切片时，为一个左闭右开的区间，如果使用标签的话，为闭区间，如果标签也是数字的话，默认当做下标做切片（可以使用 -1)")])])]),i._v(" "),v("li",[i._v("基本技巧\n"),v("ul",[v("li",[i._v("数据查看\n"),v("ul",[v("li",[i._v("series.head(number) 默认查看最前面五条数据，可以传入 Number 的值，自己指定查看最前面几个数据")]),i._v(" "),v("li",[i._v("series.tail(number) 默认查看最后面五条数据，可以传入 Number 的值，自己指定查看最后面几个数据")]),i._v(" "),v("li",[i._v("series.reindex（一些索引） 返回值为一个 series, 返回的 series 中，给定的索引如果在原 series 中存在，则会将原 series 中的对应的索引和值添加到这个 series 中，如果不存在则会给给定索引添加空值并保留在返回的 series 中")])])])])])]),i._v(" "),v("div",{staticClass:"warning custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("WARNING")]),i._v(" "),v("p",[i._v("reindex 方法并不是改变原 series 的索引\nreindex 方法有一个可以选参数 fill_value 可以指定给所有不存在的索引添加一个默认值")])]),i._v(" "),v("ul",[v("li",[i._v("对齐\n"),v("ul",[v("li",[i._v("当两个 series 做操作时，比如说做加法运算，会将两个 series 中索引相同的值相加，如果某些索引只在一个 series 中存在，则这些索引的相加结果为 0")])])]),i._v(" "),v("li",[i._v("添加，修改，删除\n"),v("ul",[v("li",[i._v("删除\n"),v("ul",[v("li",[i._v("series.drop(index) 返回值为一个 series, 不会改变原 series, 新的 series 不包含被删除的项，如果需要删除多项，那么则需要传入一个索引列表")])])]),i._v(" "),v("li",[i._v("添加\n"),v("ul",[v("li",[i._v("直接通过标签 / 索引添加值 如 b[20] = 10")]),i._v(" "),v("li",[i._v("series.append(series) 返回一个新的 series, 添加一个 series 到指定 series 末端，但不会改变原 series")])])])])]),i._v(" "),v("li",[i._v("两个方法\n"),v("ul",[v("li",[i._v("series.isnull() 返回一个布尔 series, 空值对应 true")]),i._v(" "),v("li",[i._v("series.notnull() 返回一个布尔 series, 空置对应 false")])])])]),i._v(" "),v("h3",{attrs:{id:"_2-dataframe"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-dataframe","aria-hidden":"true"}},[i._v("#")]),i._v(" 2. DataFrame")]),i._v(" "),v("blockquote",[v("p",[i._v("DataFrame: 二维数组，一个表格型的数据结构，包含一组有序的列，其列的值类型可以是数值，字符串，布尔值等，DataFrame 中的数据以一个或多个二维块存放，不是列表，字典或者一维数组结构\n例子：\ndata = {'name':['Jack','Tom','Mary'],\n'age':[18,19,20],\n'gender':['m','m','w']}\nframe = pandas.DataFrame(data)")])]),i._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("TIP")]),i._v(" "),v("p",[i._v("DataFrame 有三个部分 index（行标签） columns（列标签） value（值） 有点类似 excel")])]),i._v(" "),v("ul",[v("li",[i._v("创建方法：pandas.DataFrame(?)\n"),v("ul",[v("li",[i._v("由数组 / 列表组成的字典\n这种方法创建的 dataframe  columns 为字典的 key, index 为默认数字标签，如果要指定 index, 可以加入可选参数\nindex = list index 的个数必须和原数据段数量相互匹配\n和\ncolumns = list columns 可以重新指定列的顺序，也可以增加或者减少列的数量，如果添加的 List 中有列名不存在于原列名中，会创建空值"),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("TIP")]),i._v(" "),v("p",[i._v("字典的值的长度必须保持一致")])])]),i._v(" "),v("li",[i._v("由 series 组成的字典\n这种方法创建的 dataframe, columns 为字典的 key,index 为 series 的标签（如果 series 没有指定标签，则是默认的数字标签）\nseries 的长度可以不一样，生成的 dataframe 会出现 nan 值")]),i._v(" "),v("li",[i._v("由二维数组直接创建\nindex 和 columns 的长度必须和数组形状一致，如果不指定 index 和 columns, 两者均为默认样式")]),i._v(" "),v("li",[i._v("由字典组成的列表\n如果字典中的字段的值长度不一致，会添加空值用来对齐\n每一个字典代表一行数据\ncolumns 为字典的 Key index 不做指定则为默认的数组标签")]),i._v(" "),v("li",[i._v("由字典组成的字典\n该方法创建的 dataframe, columns 为字典的 Key index 为子字典的 key\n创建方法中的可选参数与上面几种创建方法不同，不能改变原有的 index, 如果指向新的标签，值为空值，有点像 series.reindex()")])])]),i._v(" "),v("li",[i._v("选择方法：\n"),v("ul",[v("li",[i._v("选择列：\n直接使用方括号语法 如 DataFrame['column1']\n如果要选择多列，和多维数组选择元素方法类似，如 DataFrame[['column1','column2']]")])])]),i._v(" "),v("li",[i._v("选择行：\n"),v("ul",[v("li",[i._v("DataFrame.loc['row1'] 使用 loc 方法传入参数 '行名' 多行选择和多列选择方法一样")])])])]),i._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("TIP")]),i._v(" "),v("p",[i._v("选择一行或者一列的时候返回的是一个 series, 选择多行或者多列的时候放回一个 DataFrame")])]),i._v(" "),v("pre",[v("code",[i._v("- DataFrame【一个切片】 方括号内直接使用切片会选择行，左闭右开\n")])]),i._v(" "),v("div",{staticClass:"warning custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("WARNING")]),i._v(" "),v("p",[i._v("使用切片选择的时候就算只选择一行也是一个 DataFrame")])]),i._v(" "),v("pre",[v("code",[i._v("- DataFrame.loc【一个切片】 这种切片方式是一个闭区间，末端包含\n- DataFrame.iloc【第几行】  传入行号（注意这里不是传入行的索引） -1 表示最后一行，可以使用切片 选择多行使用 DataFrame.iloc[[]]\n")])]),i._v(" "),v("ul",[v("li",[i._v("布尔索引：\n"),v("ul",[v("li",[i._v("单行 / 列  做判断的时候只保留所有为 True 的行，为 False 的行不会选出来")]),i._v(" "),v("li",[i._v("多行 / 列  做判断的时候保留所有行，但是为 True 的元素会显示其数值，为 False 的元素会显示 NaN")])])]),i._v(" "),v("li",[i._v("基本技巧\n"),v("ul",[v("li",[i._v("DataFrame.head() 查看前 N 行数据，默认查看最前面五条数据")]),i._v(" "),v("li",[i._v("DataFrame.tail() 查看后 N 行数据，默认查看最后面五条数据")]),i._v(" "),v("li",[i._v("DataFrame.T 转置，行列值和标签都互换")]),i._v(" "),v("li",[i._v("添加：\n"),v("ul",[v("li",[i._v("直接使用中括号语法添加（行使用 .loc 等方法）")])])]),i._v(" "),v("li",[i._v("修改：\n"),v("ul",[v("li",[i._v("直接使用中括号语法修改（行使用 .loc 等方法）")])])])])])]),i._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("TIP")]),i._v(" "),v("p",[i._v("可以直接操作多个")])]),i._v(" "),v("ul",[v("li",[i._v("删除：\n"),v("ul",[v("li",[i._v("使用 drop(n) : 默认删除第 n 行，如果需要删除列 则需要添加参数 axis=1")])])])]),i._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("TIP")]),i._v(" "),v("p",[i._v("使用额外参数 inplace = False 表示生成新的 DataFrame, 而不是直接改变源 DataFrame 的数据")])]),i._v(" "),v("pre",[v("code",[i._v("- del 语句 : 使用中括号语法，默认删除列\n")])]),i._v(" "),v("ul",[v("li",[i._v("对齐：\n"),v("ul",[v("li",[i._v("同 Series")])])]),i._v(" "),v("li",[i._v("排序（也适用于 Series)\n"),v("ul",[v("li",[i._v("按值排序 sort_values【列标签名】 额外参数 ascending=True 表示升序排序  ascending=False 表示降序排序  默认升序")]),i._v(" "),v("li",[i._v("按索引排序 sort_index() ascending 和上面的用法意义相同 索引时数组安大小排序，索引时字符按字典书序排序")])])])]),i._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("TIP")]),i._v(" "),v("p",[i._v("可以多列排序，例如 DataFrame.sort_values(['a','c']) 先将 a 列的值排完，然后针对 a 列中值相同情况根据 c 列排序（但是不会改变 a 列的顺序）, 如果 a 全部都不一样，就不用考虑 c 了")])]),i._v(" "),v("h2",{attrs:{id:"datetime-模块"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#datetime-模块","aria-hidden":"true"}},[i._v("#")]),i._v(" datetime 模块")]),i._v(" "),v("ul",[v("li",[i._v("获取当前时间 datetime.date.today() 返回的数据格式是一个 datetime.date 可以强转成字符串")])]),i._v(" "),v("blockquote",[v("p",[i._v("返回的格式不是一个字符串的意义：返回一个特殊的对象我们可以在其中添加很多的自定义方法，能够更加方便的使用这个字符串")])]),i._v(" "),v("ul",[v("li",[i._v("生成一个 datetime.date 对象：datetime.date(year.month,day)")]),i._v(" "),v("li",[i._v("获得当前时间（最小单位为毫秒） datetime.datetime.now() 返回的数据格式为 datetime.datetime")]),i._v(" "),v("li",[i._v("生成一个时间戳：datetime.datetime（年，月，日，时，分，秒） 可以用来做加减法")]),i._v(" "),v("li",[i._v("时间差 (datetime.timedelta) 可以由两个时间戳做计算得到，默认时间差的单位是天，可以和一个时间戳做计算\n"),v("ul",[v("li",[i._v("生成一个时间差：datetime.timedelta（天，秒）")])])])]),i._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[i._v("TIP")]),i._v(" "),v("p",[i._v("将一个字符串转化成一个时间 from dateutil.parser import parse\n使用 parse（字符串） 方法，会将指定字符串转化成一个可读的时间（不支持中文） 支持 / - 空格 英文")])]),i._v(" "),v("h2",{attrs:{id:"数值计算和统计"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数值计算和统计","aria-hidden":"true"}},[i._v("#")]),i._v(" 数值计算和统计")])])}],!1,null,null,null);a.default=t.exports}}]);