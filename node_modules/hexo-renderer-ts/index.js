"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts = require("typescript");
const os = require("os");
const path = require("path");
function reportDiagnostics(diagnostics) {
    if (!diagnostics)
        return;
    diagnostics.forEach(diagnostic => {
        let message = ts.formatDiagnostic(diagnostic, {
            getCurrentDirectory: () => hexo.base_dir,
            getNewLine: () => os.EOL,
            getCanonicalFileName: (fileName) => path.normalize(fileName)
        });
        hexo.log.error(message.trim());
    });
}
function getCompileOption(options) {
    const config = hexo && hexo.config && hexo.config.render && hexo.config.render.ts;
    const defaultOptions = ts.getDefaultCompilerOptions();
    let fileOptions = null;
    if (config) {
        if (typeof config === 'object') {
            const result = ts.convertCompilerOptionsFromJson(config, hexo.base_dir);
            reportDiagnostics(result.errors);
            fileOptions = result.options;
        }
        else {
            const file = hexo.base_dir + String(config);
            const json = require(file);
            const result = ts.convertCompilerOptionsFromJson(json.compilerOptions, hexo.base_dir, String(config));
            reportDiagnostics(result.errors);
            fileOptions = result.options;
        }
    }
    let argOptions = null;
    if (options) {
        const result = ts.convertCompilerOptionsFromJson(options, hexo.base_dir);
        reportDiagnostics(result.errors);
        argOptions = result.options;
    }
    const mergedOptions = Object.assign({}, defaultOptions, fileOptions, argOptions);
    mergedOptions.suppressOutputPathCheck = true;
    mergedOptions.allowNonTsExtensions = true;
    mergedOptions.noResolve = true;
    return mergedOptions;
}
function tsRenderer(data, hexoOptions) {
    const options = getCompileOption(hexoOptions);
    const inputFileName = data.path || (options.jsx ? "module.tsx" : "module.ts");
    const sourceFile = ts.createSourceFile(inputFileName, data.text, options.target);
    let outputText;
    let sourceMapText;
    const defHost = ts.createCompilerHost(options);
    const compilerHost = Object.assign({}, defHost, { getSourceFile: (fileName, langVersion, onError, shouldCreateNewSourceFile) => {
            return fileName === path.normalize(inputFileName) ? sourceFile : defHost.getSourceFile(fileName, langVersion, onError, shouldCreateNewSourceFile);
        }, writeFile: (name, text) => {
            if (path.extname(name) === ".map") {
                sourceMapText = text;
            }
            else {
                outputText = text;
            }
        }, useCaseSensitiveFileNames: () => false, getCanonicalFileName: fileName => fileName, getCurrentDirectory: () => hexo.base_dir, fileExists: (fileName) => fileName === inputFileName || defHost.fileExists(fileName) });
    const program = ts.createProgram([inputFileName], options, compilerHost);
    const emitResult = program.emit();
    const allDiagnostics = ts
        .getPreEmitDiagnostics(program)
        .concat(emitResult.diagnostics);
    reportDiagnostics(allDiagnostics);
    return outputText || "";
}
hexo.extend.renderer.register('ts', 'js', tsRenderer, true);
hexo.extend.renderer.register('tsx', 'js', tsRenderer, true);
