(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{173:function(v,i,a){"use strict";a.r(i);var _=a(0),e=Object(_.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var v=this,i=v.$createElement,a=v._self._c||i;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"python"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python","aria-hidden":"true"}},[v._v("#")]),v._v(" Python")]),v._v(" "),a("blockquote",[a("p",[v._v("这篇文章主要功能暂定为一个通俗易懂的功能字典")])]),v._v(" "),a("div",{staticClass:"warning custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("WARNING")]),v._v(" "),a("p",[v._v("普通的变量声明和简单的语法及循环等这里不再赘述")])]),v._v(" "),a("h2",{attrs:{id:"几个操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#几个操作","aria-hidden":"true"}},[v._v("#")]),v._v(" 几个操作")]),v._v(" "),a("ul",[a("li",[v._v("多变量声明: a,b,c = 1,2,3")]),v._v(" "),a("li",[v._v("取幂: **  如 2**3 = 8")]),v._v(" "),a("li",[v._v("取整商: // 如 10//4 = 2")])]),v._v(" "),a("hr"),v._v(" "),a("h2",{attrs:{id:"python中常用的数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python中常用的数据结构","aria-hidden":"true"}},[v._v("#")]),v._v(" Python中常用的数据结构")]),v._v(" "),a("ul",[a("li",[v._v("元组 ()")]),v._v(" "),a("li",[v._v("列表 []")]),v._v(" "),a("li",[v._v("字典 {}")])]),v._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),a("p",[v._v('两个元组(列表) 可以通过 "+" 操作符连接\n一个元组(列表) 可以通过 "*" 操作符复制')])]),v._v(" "),a("h2",{attrs:{id:"切片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切片","aria-hidden":"true"}},[v._v("#")]),v._v(" 切片")]),v._v(" "),a("p",[v._v("切出一个左闭右开的区间"),a("br"),v._v('\n如:"abcdefg"[2:4] 返回的是 "cd"')]),v._v(" "),a("ul",[a("li",[v._v("[x:] 表示从第x个到最后一个")]),v._v(" "),a("li",[v._v("[:y] 表示从第0个到第y-1个")])]),v._v(" "),a("h2",{attrs:{id:"步长"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#步长","aria-hidden":"true"}},[v._v("#")]),v._v(" 步长")]),v._v(" "),a("p",[v._v("规定切片之间间隔的变量个数"),a("br"),v._v('\n如 "abcdefg"[1:4:2] 返回的是 "bd"\n解释: [1:4] 切出来的是 "bcde" 从这个结果中第0个开始,每隔1个取一个')]),v._v(" "),a("h2",{attrs:{id:"删除列表-列表元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除列表-列表元素","aria-hidden":"true"}},[v._v("#")]),v._v(" 删除列表/列表元素")]),v._v(" "),a("p",[v._v("使用del语句")]),v._v(" "),a("ul",[a("li",[v._v("del list[1] 删除列表中第一个元素")]),v._v(" "),a("li",[v._v("del list[2:4] 删除列表中第三和第四个元素")]),v._v(" "),a("li",[v._v("del list 删除这个列表,这个变量没有任何指向了")])]),v._v(" "),a("h2",{attrs:{id:"列表常用函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表常用函数","aria-hidden":"true"}},[v._v("#")]),v._v(" 列表常用函数")]),v._v(" "),a("ul",[a("li",[v._v("len() 返回列表长度")]),v._v(" "),a("li",[v._v("max() 返回列表中最大值")]),v._v(" "),a("li",[v._v("min() 返回列表中最小值")]),v._v(" "),a("li",[v._v("sum() 返回列表的和")]),v._v(" "),a("li",[v._v("sorted() 对一个列表进行排序,返回排序的结果,不改变被排序的列表")])]),v._v(" "),a("h2",{attrs:{id:"列表常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表常用方法","aria-hidden":"true"}},[v._v("#")]),v._v(" 列表常用方法")]),v._v(" "),a("ul",[a("li",[v._v(".index(value) 求列表中第一次出现值为value元素的索引,不存在会报错")]),v._v(" "),a("li",[v._v(".count(value) 求列表中出现了几次值为value的元素")]),v._v(" "),a("li",[v._v(".remove(value) 移除列表中值为value的元素,有多个只会移除第一个,没有该值会报错")]),v._v(" "),a("li",[v._v(".append(value) 在列表末尾添加一个值为value的元素,即使这个元素时一个列表,也会作为一个元素添加进去")]),v._v(" "),a("li",[v._v(".extend(value) 可以用来添加多个元素,如果value是一个列表,则会将这个两个列表拼起来")]),v._v(" "),a("li",[v._v(".clear() 删除列表中所有元素")]),v._v(" "),a("li",[v._v(".insert(position,value) 在索引为Position的地方插入value")]),v._v(" "),a("li",[v._v(".copy() 复制一个列表,仅仅是值传递,不是引用传递")]),v._v(" "),a("li",[v._v(".sort() 对一个列表进行排序,如果括号内写 reverse=True 则会方向排序,默认对数字从小到大,对字母按照字典顺序排列")])]),v._v(" "),a("h2",{attrs:{id:"生成器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成器","aria-hidden":"true"}},[v._v("#")]),v._v(" 生成器")]),v._v(" "),a("ul",[a("li",[v._v('range() 生成一个左闭右开的区间,左边的数缺省是0,参数间隔和切片不同,使用",",可以设定步长 生成的结果可以强转为列表或者元组')])]),v._v(" "),a("h2",{attrs:{id:"格式化输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#格式化输出","aria-hidden":"true"}},[v._v("#")]),v._v(" 格式化输出")]),v._v(" "),a("ul",[a("li",[v._v("%i 表示整数")]),v._v(" "),a("li",[v._v("%c 表示字符")]),v._v(" "),a("li",[v._v("%u 表示无符号整数")]),v._v(" "),a("li",[v._v("%o 表示八进制")]),v._v(" "),a("li",[v._v("%d 表示十进制")]),v._v(" "),a("li",[v._v("%x 表示十六进制")]),v._v(" "),a("li",[v._v("%s 表示字符串\n"),a("ul",[a("li",[v._v("%10s 表示右对齐输出,占位符10位(占位符个数可以更改,占位符为空格符)")]),v._v(" "),a("li",[v._v("%-10s 表示左对齐输出,占位符10位")]),v._v(" "),a("li",[v._v("%.2s 截取字符串起始两位")])])]),v._v(" "),a("li",[v._v("%e 表示科学计数法")]),v._v(" "),a("li",[v._v("%g 自动识别,比较简单用浮点数,比较复杂用科学计数法")]),v._v(" "),a("li",[v._v("多个参数时, 采用 %(str1,str2) 的格式")])]),v._v(" "),a("blockquote",[a("p",[v._v('a = "hello python"\nprint("%s" % a)\n输出: hello python')])]),v._v(" "),a("ul",[a("li",[v._v("使用{} 和 .format() format()参数为一个元组,{}内可以加一个索引,如果没有索引的时候{}的数量必须和元组长度一样,当{}内为一个变量名时,format()参数为一条赋值语句.")])]),v._v(" "),a("blockquote",[a("p",[v._v('如 print(\'今天如何{}昨天{}\'.format(",好,",".不好."))\nprint("今天{how}".format(how = \'好\'))')])]),v._v(" "),a("h2",{attrs:{id:"字符串常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串常用方法","aria-hidden":"true"}},[v._v("#")]),v._v(" 字符串常用方法")]),v._v(" "),a("ul",[a("li",[v._v('.replace("oldString","newString"[,count]) count表示要替换的个数,返回值为结果字符串,不会改变源字符串')]),v._v(" "),a("li",[v._v('.split("symbol") 用指定符号将字符串切割成列表')])]),v._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),a("p",[v._v("如果split()中不传入任何参数,则会以空格切割")])]),v._v(" "),a("div",{staticClass:"danger custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("WARNING")]),v._v(" "),a("p",[v._v("不能使用 split(''), 如果想将字符串中每一个字符都变成一个列表中的元素,应该使用 list() 函数强转字符串")])]),v._v(" "),a("ul",[a("li",[v._v("'symbol'.join(list/tuple) 将一个列表或者元组以指定分隔符合并成一个字符串")])]),v._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),a("p",[v._v("这里可以使用空字符串进行合并")])]),v._v(" "),a("ul",[a("li",[v._v('.startswith("string") 检测该字符串是否以默认字符(串)开头,如果是则返回True,否则返回False')]),v._v(" "),a("li",[v._v('.endswith("String") 检测该字符串是否以默认字符(串)结尾,如果是则返回True,否则返回False')])]),v._v(" "),a("div",{staticClass:"warning custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("WARNING")]),v._v(" "),a("p",[v._v("这里是startswith 而不是 startwith")])]),v._v(" "),a("ul",[a("li",[v._v(".upper() 返回一个新字符串,该字符串的值为源字符串转化成大写,不会改变源字符串")]),v._v(" "),a("li",[v._v(".lower() 返回一个新字符串,该字符串的值为源字符串转化成小写,不会改变源字符串")]),v._v(" "),a("li",[v._v(".swapcase() 返回一个新字符串,该字符串中大写字符为源字符串的小写字符,该字符串的小写字符为源字符串的大写字母,不会改变源字符串")]),v._v(" "),a("li",[v._v(".capitalize() 返回一个新字符串,新字符串和源字符串的区别为新字符串首字母大写,不会改变原字符串")]),v._v(" "),a("li",[v._v(".isnumeric() 判断该字符串是否全部由数字构成,如果是则返回True,否则返回False")]),v._v(" "),a("li",[v._v(".isalpha() 判断该字符串是否全部为字符构成,如果是则返回True,否则返回False")]),v._v(" "),a("li",[v._v(".isalnum() 判断该字符串是否全部由字符和数字构成,如果是则返回True,否则返回False")]),v._v(" "),a("li",[v._v(".isspace() 判断该字符串是否全为空格,如果是则返回True,否则返回False")]),v._v(" "),a("li",[v._v(".isdigit() 判断该字符串是否全为数字,如果是则返回True,否则返回False")]),v._v(" "),a("li",[v._v(".strip() 去掉源字符串两端的空格并且返回一个新字符串,不会改变源字符串")]),v._v(" "),a("li",[v._v(".rstrip() 去掉源字符串右侧的空格并且返回一个新字符串,不会改变源字符串")]),v._v(" "),a("li",[v._v(".lstrip() 去掉源字符串左侧的空格并且返回一个新字符串,不会改变源字符串")])]),v._v(" "),a("h2",{attrs:{id:"字典"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字典","aria-hidden":"true"}},[v._v("#")]),v._v(" 字典")]),v._v(" "),a("p",[v._v("声明一个字典的常用方式:")]),v._v(" "),a("ul",[a("li",[v._v("直接赋值 如 dic = {'a':1,'b':2}")]),v._v(" "),a("li",[v._v("使用dict()\n"),a("ul",[a("li",[v._v("使用dict()转化包含列表的列表:")])])])]),v._v(" "),a("blockquote",[a("p",[v._v("lst = [[1,2],[2,3],[3,4]]"),a("br"),v._v("\ndic = dict(lst)"),a("br"),v._v("\ndic : {1: 2, 2: 3, 3: 4}")])]),v._v(" "),a("ul",[a("li",[v._v("使用dict() 快速赋值:")])]),v._v(" "),a("blockquote",[a("p",[v._v("dic = dict( m = 1,n = 2,h = 3)"),a("br"),v._v("\nprint(dic)"),a("br"),v._v("\ndic:{'m':1,'n':2','h':3}")])]),v._v(" "),a("ul",[a("li",[v._v("使用dict.fromkeys(list[,value]) 函数")])]),v._v(" "),a("blockquote",[a("p",[v._v("list为字典的键名,如果value没有指定,那么默认每一个元素的值都为None")])]),v._v(" "),a("div",{staticClass:"warning custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("WARNING")]),v._v(" "),a("p",[v._v("字典的键名必须是不可变对象")])]),v._v(" "),a("p",[v._v("字典中常用的方法:")]),v._v(" "),a("ul",[a("li",[v._v(".get(key) 返回key所对应的值")])]),v._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),a("p",[v._v("可以直接使用中括号语法访问")])]),v._v(" "),a("ul",[a("li",[v._v(".keys() 返回一个视图,其中包含所有key值,和range生成的结果结构类似")]),v._v(" "),a("li",[v._v(".values() 返回一个视图,其中包含所有value值,和range生成的结果结构类似")]),v._v(" "),a("li",[v._v(".items() 返回一个视图,其中包含所有项目,和range生成的结果结构类似")])]),v._v(" "),a("hr"),v._v(" "),a("h2",{attrs:{id:"函数声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数声明","aria-hidden":"true"}},[v._v("#")]),v._v(" 函数声明")]),v._v(" "),a("ul",[a("li",[v._v("def function_name(参数列表):")]),v._v(" "),a("li",[v._v("默认值: 直接在声明参数的时候,赋值即可 如 def a(x,y=10)")]),v._v(" "),a("li",[v._v('可变参数: 使用 "*" 关键字 如 def a(*x) 这时候会将这个参数变成一个元组')])]),v._v(" "),a("h2",{attrs:{id:"python层级概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python层级概念","aria-hidden":"true"}},[v._v("#")]),v._v(" python层级概念")]),v._v(" "),a("ul",[a("li",[v._v("表达式 -> 创建,处理对象")]),v._v(" "),a("li",[v._v("语句 -> 包含表达式")]),v._v(" "),a("li",[v._v("逻辑单元 -> 函数或者类,由语句构成")]),v._v(" "),a("li",[v._v("模块 -> .py代码文件组成模块")]),v._v(" "),a("li",[v._v("包 ->定义自己有关系的文件,或者模块(包可以想象成文件夹,模块可以想象成文件夹当中的模块)")]),v._v(" "),a("li",[v._v("程序 -> 若干个包+若干个模块")])]),v._v(" "),a("h2",{attrs:{id:"导入模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导入模块","aria-hidden":"true"}},[v._v("#")]),v._v(" 导入模块")]),v._v(" "),a("ul",[a("li",[v._v("import modelname 导入指定模块")]),v._v(" "),a("li",[v._v("import modelname as simplename 在调用的时候可以简化书写")]),v._v(" "),a("li",[v._v("from modelname import functionname 导入部分模块(例如仅仅导入几个函数)")])]),v._v(" "),a("h2",{attrs:{id:"常用模块介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用模块介绍","aria-hidden":"true"}},[v._v("#")]),v._v(" 常用模块介绍")]),v._v(" "),a("ul",[a("li",[v._v("random\n"),a("ul",[a("li",[v._v("random.random() 返回一个0到1之间的随机浮点数")]),v._v(" "),a("li",[v._v("random.randint(a,b) 返回一个在[a,b]区间中的随机整数")]),v._v(" "),a("li",[v._v("random.choice(list/tuple) 返回指定列表(元组)中的随机一项")]),v._v(" "),a("li",[v._v("random.sample(list/tuple,numberOfResult) 返回一个指定元素个数的列表,列表中的元素为在指定的列表或者元组中随机选择的")]),v._v(" "),a("li",[v._v("random.shuffle(list) 将指定列表随机打乱,直接在源列表中操作,没有返回值")])])]),v._v(" "),a("li",[v._v("time\n"),a("ul",[a("li",[v._v("time.sleep(second)  暂停指定秒数(不是毫秒)")]),v._v(" "),a("li",[v._v("time.ctime() 返回当地时间,为字符串类型 如: 'Sun May 19 16:00:58 2019'")]),v._v(" "),a("li",[v._v("time.localtime() 返回当前时区的时间,为一个视图 wday 0-6 分别表示周一到周天,yday 1-366 分别表示一年中的第几天")]),v._v(" "),a("li",[v._v('time.strftime("时间格式",time.localtime()) 返回当前指定格式的时间,为一个字符串,如 %Y-%m-%d %H:%M:%S 返回  年-月-日 时:分:秒')]),v._v(" "),a("li",[v._v("time.time() 返回当前毫秒数")])])])]),v._v(" "),a("h2",{attrs:{id:"文件读取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件读取","aria-hidden":"true"}},[v._v("#")]),v._v(" 文件读取")]),v._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),a("p",[v._v("多多注意文件指针的位置")])]),v._v(" "),a("ul",[a("li",[v._v("open(filePath,type[,encoding]) 返回一个类似C语言中文件指针的东西\n"),a("ul",[a("li",[v._v("filePath(记得转义)\n"),a("ul",[a("li",[v._v("绝对路径")]),v._v(" "),a("li",[v._v("相对路径")])])]),v._v(" "),a("li",[v._v("type 类型:\n"),a("ul",[a("li",[v._v("'r' 读取文件,默认")]),v._v(" "),a("li",[v._v("'w' 写入文件")]),v._v(" "),a("li",[v._v("'rw' 读写文件")]),v._v(" "),a("li",[v._v("'a' 追加")])])])])]),v._v(" "),a("li",[v._v("filePointer.read([number]) 读取文件所有内容,返回一个字符串,如果指定Number值,则会读取指定数量的字符")]),v._v(" "),a("li",[v._v("fielPointer.readline([number]) 读取文件一行,如果指定number值的话,则会读取该行的number个字符,第二次调用该函数的时候,如果该行没有读完,会继续读")]),v._v(" "),a("li",[v._v("filePointer.readlines() 读取文件中所有行,返回结果为一个列表,每一行就是列表中的一个元素,每一个元素以换行符结尾")]),v._v(" "),a("li",[v._v("filePointer.seek(number) 移动文件指针 0 表示起始位置")]),v._v(" "),a("li",[v._v("filePointer.close() 关闭文件")]),v._v(" "),a("li",[v._v("filePointer.write(string) 将指定内容写入文件中,记得要关闭文件")]),v._v(" "),a("li",[v._v("filePointer.writelines(list) 一行一行的写入文件,列表中必须是字符串型的数据,不会换行,直接把列表变成字符串,除非添加换行符")])]),v._v(" "),a("h2",{attrs:{id:"os模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#os模块","aria-hidden":"true"}},[v._v("#")]),v._v(" os模块")]),v._v(" "),a("blockquote",[a("p",[v._v("提供了丰富的方法处理文件和目录"),a("br"),v._v("\n使用方法: import os")])]),v._v(" "),a("ul",[a("li",[v._v("os.name 返回一个包含系统名字的字符串")]),v._v(" "),a("li",[v._v("os.getcwd() 返回一个字符串,其中包含当前文件绝对路径")]),v._v(" "),a("li",[v._v("os.listdir() 返回一个列表,其中包含当前文件的所有文件和目录名")]),v._v(" "),a("li",[v._v("os.chdir(newPath) 改变工作路径为指定工作路径")]),v._v(" "),a("li",[v._v("os.remove(filename) 删除指定文件")]),v._v(" "),a("li",[v._v("os.path.split(filePath) 返回一个元组,前者是文件目录,后者是文件名")]),v._v(" "),a("li",[v._v("os.path.exists(filePath) 返回一个布尔值,判断一个文件是否存在")])]),v._v(" "),a("h2",{attrs:{id:"pickle-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pickle-模块","aria-hidden":"true"}},[v._v("#")]),v._v(" pickle 模块")]),v._v(" "),a("blockquote",[a("p",[v._v("提供了一个简单的持久化功能,可以将对象以文件的形式存放在磁盘中"),a("br"),v._v("\n提供了基本数据的序列化和反序列化"),a("br"),v._v("\n通过序列化操作可以将程序运行中的对象信息保存在文件中,永久储存"),a("br"),v._v("\n通过反序列化操作,可以从文件中创建上一次程序保存的对象")])]),v._v(" "),a("div",{staticClass:"warning custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("WARNING")]),v._v(" "),a("p",[v._v("写入方式不是'w' 而是 'wb'; 读取方式不是'r' 而是 'rb'")])]),v._v(" "),a("ul",[a("li",[v._v("pickle.dump(string,filepath) 将数据储存进 .pkl 文件")]),v._v(" "),a("li",[v._v("pickle.load(filepath) 返回file中的数据")])]),v._v(" "),a("h2",{attrs:{id:"numpy模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#numpy模块","aria-hidden":"true"}},[v._v("#")]),v._v(" numpy模块")]),v._v(" "),a("blockquote",[a("p",[v._v("开源强大的科学计算工具包"),a("br"),v._v("\n与列表的直观区别:输出的时候元素之间没有','号")])]),v._v(" "),a("ul",[a("li",[v._v("创建numpy数组\n"),a("ul",[a("li",[v._v("numpy.array(list/range()) 通过一个list或者视图返回一个数组")]),v._v(" "),a("li",[v._v("numpy.arange(number) 直接调用内置方法返回一个数组,和range用法类似")])])])]),v._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),a("p",[v._v("对数组直接进行加减乘除操作就相当于对数组中的每一项进行该操作")])]),v._v(" "),a("ul",[a("li",[a("p",[v._v("数组常用属性:")]),v._v(" "),a("ul",[a("li",[v._v(".ndim 返回数组的维度")]),v._v(" "),a("li",[v._v(".shape 返回一个元组,其中包含数组的列数和行数")]),v._v(" "),a("li",[v._v(".size 返回数组中元素的个数")]),v._v(" "),a("li",[v._v(".dtype 返回数组中元素的数据类型")]),v._v(" "),a("li",[v._v(".itemsize 返回数组中元素的字节大小")]),v._v(" "),a("li",[v._v(".data 返回数组在缓存区中的位置")])])]),v._v(" "),a("li",[a("p",[v._v("数组常用方法:")]),v._v(" "),a("ul",[a("li",[v._v(".mean() 返回数组中所有元素取平均值的结果")]),v._v(" "),a("li",[v._v(".sum() 返回数组中所有元素加起来的值")]),v._v(" "),a("li",[v._v(".reshape(shape) 返回重置形状之后的数组,不改变原数组,但是不能改变元素个数")])])])]),v._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),a("p",[v._v("这里的shape就是一个有序数对,假如说使用 array.reshape(2,5)就是将这个数组变成一个两行五列的数组")])]),v._v(" "),a("ul",[a("li",[a("p",[v._v(".resize(shape) 直接修改原数组的形状")])]),v._v(" "),a("li",[a("p",[v._v(".T 返回一个数组的转置,不改变原数组")])]),v._v(" "),a("li",[a("p",[v._v(".astype(type) 修改数组中元素的类型")]),v._v(" "),a("ul",[a("li",[v._v("numpy.int64")]),v._v(" "),a("li",[v._v("numpy.str")]),v._v(" "),a("li",[v._v("numpy.float")]),v._v(" "),a("li",[v._v("numpy.int32")])])]),v._v(" "),a("li",[a("p",[v._v("数组常用函数:")]),v._v(" "),a("ul",[a("li",[v._v("numpy.resize(array,shape) 返回一个新数组,为原数组指定形状转化后得到,如果新数组的元素个数比原数组少,则直接删除,如果比原数组多,那么就按照原数组中的数据从小到大的顺序填充到新数组当中")]),v._v(" "),a("li",[v._v("numpy.linspace(开始的数字大小,结束的数字大小,样本的个数,endpoint=True/False,restep=True/False) 返回在间隔 [开始,停止] 上计算的指定个均匀间隔的样本数组 (是一个闭区间所以会多一个) endpoint 是否包含结束数字大小的值  如果restep设置为true,会返回一个包含两个元素的元组,其中的第一个元素为数组,第二个元素为步长")]),v._v(" "),a("li",[v._v("numpy.zeros(shape,dtype) 返回一个指定形状的用0填充的数组,默认数据类型为浮点型,可以自定义当中的数据类型(如果定义为字符型的话,数组中的每一个元素都是空字符串)")]),v._v(" "),a("li",[v._v("numpy.zeros_like(array) 返回一个和另一个数组形状相同的用0填充的数组")]),v._v(" "),a("li",[v._v("numpy.ones() 同上 numpy.zeros()")]),v._v(" "),a("li",[v._v("numpy.ones_like() 同上 numpy.zeros_like()")]),v._v(" "),a("li",[v._v("numpy.eye(number) 返回一个方阵,大小为number的值,对角线上为1,其余位置值为0")]),v._v(" "),a("li",[v._v("numpy.random.rand(shape) 返回指定形状的数组,其中每一个元素都是从0到1随机取值,均匀分布")]),v._v(" "),a("li",[v._v("numpy.random.normal(size=shape) 返回一个自定形状的正太分布的数组")])])])]),v._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),a("p",[v._v("如果想创建一个2X3大小的我们应该写 numpy.random.normal(size=(2,3))")])]),v._v(" "),a("ul",[a("li",[a("p",[v._v("numpy.random.randn(shape) 返回一个指定形状的正太分布数组")])]),v._v(" "),a("li",[a("p",[v._v("numpy.random.randint(low,high[,size=shape,dtype=]) 返回一个左闭右开的区间上的随机数组,大小可以指定")])]),v._v(" "),a("li",[a("p",[v._v('numpy.savetxt(filename,arrayname,fmt=存储类型,delimiter=分隔符,newline="\\n",header="",footer="",comments="#") 将指定数组存入指定文件中')])]),v._v(" "),a("li",[a("p",[v._v("numpy.loadtxt(filename,delimiter=分隔符) 返回一个数组")])]),v._v(" "),a("li",[a("p",[v._v("numpy.save('filename.npy',array) 储存一个数组格式的文件")])]),v._v(" "),a("li",[a("p",[v._v("numpy.load(filename) 返回一个数组")])]),v._v(" "),a("li",[a("p",[v._v("numpy.nan 返回nan")])]),v._v(" "),a("li",[a("p",[v._v("布尔数组")]),v._v(" "),a("ul",[a("li",[v._v("布尔数组可以用来提取数组中想要的元素")]),v._v(" "),a("li",[v._v("布尔数组可以直接创建,也可以直接用一个已有的数组进行逻辑判断获得 如:\narr = [[1 2 3 4]"),a("br"),v._v("\n[2 4 5 9]]"),a("br"),v._v("\narr>5 返回:"),a("br"),v._v("\n[False False False False]"),a("br"),v._v("\n[False False False True]")])])])]),v._v(" "),a("div",{staticClass:"danger custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("WARNING")]),v._v(" "),a("p",[v._v("这里判断后返回的是一个一维数组,不会保留数组原始结构")])]),v._v(" "),a("blockquote",[a("p",[v._v("如果想要获得array中所有大于5的值, 可以使用 array[[array>5]] 或者 array[array>5]"),a("br"),v._v("\n解释: 相当于用array>5这个布尔数组每一个元素的值来一一对应是否输出array数组中的元素")])]),v._v(" "),a("ul",[a("li",[v._v("多维数组访问\n"),a("ul",[a("li",[v._v("array[a][b]= array[a,b]")])])])]),v._v(" "),a("h2",{attrs:{id:"pandas-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pandas-模块","aria-hidden":"true"}},[v._v("#")]),v._v(" pandas 模块")]),v._v(" "),a("h3",{attrs:{id:"_1-series"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-series","aria-hidden":"true"}},[v._v("#")]),v._v(" 1. series")]),v._v(" "),a("blockquote",[a("p",[v._v("series 数据结构:带有标签的一维数组,可以保存任何数据类型,标签统称为索引(索引可以为数字,字符等)")])]),v._v(" "),a("div",{staticClass:"danger custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("WARNING")]),v._v(" "),a("p",[v._v("series 是一个一维数组")])]),v._v(" "),a("ul",[a("li",[v._v("series 创建方法\n"),a("ul",[a("li",[v._v("由字典创建 pandas.Series(dict)")]),v._v(" "),a("li",[v._v("由一维数组创建 pandas.Series(array)")]),v._v(" "),a("li",[v._v("通过标量创建 如 pandas.Series(100,index=range(5)) 创建一个索引为0到4的五个元素组成的series,每一个元素的值都是100")])])])]),v._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),a("p",[v._v("括号内可选参数:dtype,name,index")])]),v._v(" "),a("ul",[a("li",[v._v("索引使用:(可以不唯一,但尽量避免)\n"),a("ul",[a("li",[v._v("下标索引(不能使用-1)")]),v._v(" "),a("li",[v._v("标签索引 当指定索引时,如果使用字符当索引,可以直接通过字符检索,如果想要选出多个值,可以是用[[]],如 series[['a','b']]")]),v._v(" "),a("li",[v._v("切片索引 当使用下标切片时,为一个左闭右开的区间,如果使用标签的话,为闭区间,如果标签也是数字的话,默认当做下标做切片(可以使用-1)")])])]),v._v(" "),a("li",[v._v("基本技巧\n"),a("ul",[a("li",[v._v("数据查看\n"),a("ul",[a("li",[v._v("series.head(number) 默认查看最前面五条数据,可以传入Number的值,自己指定查看最前面几个数据")]),v._v(" "),a("li",[v._v("series.tail(number) 默认查看最后面五条数据,可以传入Number的值,自己指定查看最后面几个数据")]),v._v(" "),a("li",[v._v("series.reindex(一些索引) 返回值为一个series,返回的series中,给定的索引如果在原series中存在,则会将原series中的对应的索引和值添加到这个series中,如果不存在则会给给定索引添加空值并保留在返回的series中")])])])])])]),v._v(" "),a("div",{staticClass:"warning custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("WARNING")]),v._v(" "),a("p",[v._v("reindex方法并不是改变原series的索引\nreindex方法有一个可以选参数 fill_value 可以指定给所有不存在的索引添加一个默认值")])]),v._v(" "),a("ul",[a("li",[v._v("对齐\n"),a("ul",[a("li",[v._v("当两个series做操作时,比如说做加法运算,会将两个series中索引相同的值相加,如果某些索引只在一个series中存在,则这些索引的相加结果为0")])])]),v._v(" "),a("li",[v._v("添加,修改,删除\n"),a("ul",[a("li",[v._v("删除\n"),a("ul",[a("li",[v._v("series.drop(index) 返回值为一个series, 不会改变原series,新的series不包含被删除的项,如果需要删除多项,那么则需要传入一个索引列表")])])]),v._v(" "),a("li",[v._v("添加\n"),a("ul",[a("li",[v._v("直接通过标签/索引添加值 如 b[20] = 10")]),v._v(" "),a("li",[v._v("series.append(series) 返回一个新的series,添加一个series到指定series末端,但不会改变原series")])])])])]),v._v(" "),a("li",[v._v("两个方法\n"),a("ul",[a("li",[v._v("series.isnull() 返回一个布尔series,空值对应true")]),v._v(" "),a("li",[v._v("series.notnull() 返回一个布尔series,空置对应false")])])])]),v._v(" "),a("h3",{attrs:{id:"_2-dataframe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-dataframe","aria-hidden":"true"}},[v._v("#")]),v._v(" 2. DataFrame")]),v._v(" "),a("blockquote",[a("p",[v._v("DataFrame: 二维数组,一个表格型的数据结构,包含一组有序的列,其列的值类型可以是数值,字符串,布尔值等,DataFrame中的数据以一个或多个二维块存放,不是列表,字典或者一维数组结构"),a("br"),v._v("\n例子:"),a("br"),v._v("\ndata = {'name':['Jack','Tom','Mary'],"),a("br"),v._v("\n'age':[18,19,20],"),a("br"),v._v("\n'gender':['m','m','w']}"),a("br"),v._v("\nframe = pandas.DataFrame(data)")])]),v._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),a("p",[v._v("DataFrame 有三个部分 index(行标签) columns(列标签) value(值) 有点类似excel")])]),v._v(" "),a("ul",[a("li",[v._v("创建方法: pandas.DataFrame(?)\n"),a("ul",[a("li",[v._v("由数组/列表组成的字典"),a("br"),v._v("\n这种方法创建的dataframe  columns 为字典的key, index 为默认数字标签,如果要指定index,可以加入可选参数"),a("br"),v._v("\nindex = list index的个数必须和原数据段数量相互匹配"),a("br"),v._v("\n和"),a("br"),v._v("\ncolumns = list columns可以重新指定列的顺序,也可以增加或者减少列的数量,如果添加的List中有列名不存在于原列名中,会创建空值"),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),a("p",[v._v("字典的值的长度必须保持一致")])])]),v._v(" "),a("li",[v._v("由series 组成的字典"),a("br"),v._v("\n这种方法创建的dataframe, columns 为字典的key,index 为series的标签(如果series没有指定标签,则是默认的数字标签)"),a("br"),v._v("\nseries的长度可以不一样,生成的dataframe 会出现nan值")]),v._v(" "),a("li",[v._v("由二维数组直接创建"),a("br"),v._v("\nindex和columns 的长度必须和数组形状一致,如果不指定index 和 columns,两者均为默认样式")]),v._v(" "),a("li",[v._v("由字典组成的列表"),a("br"),v._v("\n如果字典中的字段的值长度不一致,会添加空值用来对齐"),a("br"),v._v("\n每一个字典代表一行数据"),a("br"),v._v("\ncolumns 为字典的Key index 不做指定则为默认的数组标签")]),v._v(" "),a("li",[v._v("由字典组成的字典"),a("br"),v._v("\n该方法创建的dataframe, columns 为字典的Key index 为子字典的key"),a("br"),v._v("\n创建方法中的可选参数与上面几种创建方法不同,不能改变原有的index,如果指向新的标签,值为空值,有点像series.reindex()")])])]),v._v(" "),a("li",[v._v("选择方法:\n"),a("ul",[a("li",[v._v("选择列:\n直接使用方括号语法 如 DataFrame['column1']"),a("br"),v._v("\n如果要选择多列,和多维数组选择元素方法类似,如 DataFrame[['column1','column2']]")])])]),v._v(" "),a("li",[v._v("选择行:\n"),a("ul",[a("li",[v._v("DataFrame.loc['row1'] 使用loc方法传入参数 '行名' 多行选择和多列选择方法一样")])])])]),v._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),a("p",[v._v("选择一行或者一列的时候返回的是一个series, 选择多行或者多列的时候放回一个DataFrame")])]),v._v(" "),a("pre",[a("code",[v._v("- DataFrame[一个切片] 方括号内直接使用切片会选择行,左闭右开\n")])]),v._v(" "),a("div",{staticClass:"warning custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("WARNING")]),v._v(" "),a("p",[v._v("使用切片选择的时候就算只选择一行也是一个DataFrame")])]),v._v(" "),a("pre",[a("code",[v._v("- DataFrame.loc[一个切片] 这种切片方式是一个闭区间,末端包含\n- DataFrame.iloc[第几行]  传入行号(注意这里不是传入行的索引) -1表示最后一行,可以使用切片 选择多行使用 DataFrame.iloc[[]]\n")])]),v._v(" "),a("ul",[a("li",[v._v("布尔索引:\n"),a("ul",[a("li",[v._v("单行/列  做判断的时候只保留所有为True的行,为False的行不会选出来")]),v._v(" "),a("li",[v._v("多行/列  做判断的时候保留所有行,但是为True的元素会显示其数值,为False的元素会显示NaN")])])]),v._v(" "),a("li",[v._v("基本技巧\n"),a("ul",[a("li",[v._v("DataFrame.head() 查看前N行数据,默认查看最前面五条数据")]),v._v(" "),a("li",[v._v("DataFrame.tail() 查看后N行数据,默认查看最后面五条数据")]),v._v(" "),a("li",[v._v("DataFrame.T 转置,行列值和标签都互换")]),v._v(" "),a("li",[v._v("添加:\n"),a("ul",[a("li",[v._v("直接使用中括号语法添加(行使用 .loc 等方法)")])])]),v._v(" "),a("li",[v._v("修改:\n"),a("ul",[a("li",[v._v("直接使用中括号语法修改(行使用 .loc 等方法)")])])])])])]),v._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),a("p",[v._v("可以直接操作多个")])]),v._v(" "),a("ul",[a("li",[v._v("删除:\n"),a("ul",[a("li",[v._v("使用 drop(n) :默认删除第n行,如果需要删除列 则需要添加参数 axis=1")])])])]),v._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),a("p",[v._v("使用额外参数 inplace = False 表示生成新的DataFrame,而不是直接改变源DataFrame 的数据")])]),v._v(" "),a("pre",[a("code",[v._v("- del 语句 :使用中括号语法,默认删除列\n")])]),v._v(" "),a("ul",[a("li",[v._v("对齐:\n"),a("ul",[a("li",[v._v("同Series")])])]),v._v(" "),a("li",[v._v("排序(也适用于Series)\n"),a("ul",[a("li",[v._v("按值排序 sort_values[列标签名] 额外参数 ascending=True 表示升序排序  ascending=False 表示降序排序  默认升序")]),v._v(" "),a("li",[v._v("按索引排序 sort_index() ascending 和上面的用法意义相同 索引时数组安大小排序,索引时字符按字典书序排序")])])])]),v._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),a("p",[v._v("可以多列排序,例如 DataFrame.sort_values(['a','c']) 先将a列的值排完,然后针对a列中值相同情况根据c列排序(但是不会改变a列的顺序),如果a全部都不一样,就不用考虑c了")])]),v._v(" "),a("h2",{attrs:{id:"datetime-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#datetime-模块","aria-hidden":"true"}},[v._v("#")]),v._v(" datetime 模块")]),v._v(" "),a("ul",[a("li",[v._v("获取当前时间 datetime.date.today() 返回的数据格式是一个datetime.date 可以强转成字符串")])]),v._v(" "),a("blockquote",[a("p",[v._v("返回的格式不是一个字符串的意义: 返回一个特殊的对象我们可以在其中添加很多的自定义方法,能够更加方便的使用这个字符串")])]),v._v(" "),a("ul",[a("li",[v._v("生成一个datetime.date 对象: datetime.date(year.month,day)")]),v._v(" "),a("li",[v._v("获得当前时间(最小单位为毫秒) datetime.datetime.now() 返回的数据格式为 datetime.datetime")]),v._v(" "),a("li",[v._v("生成一个时间戳: datetime.datetime(年,月,日,时,分,秒) 可以用来做加减法")]),v._v(" "),a("li",[v._v("时间差(datetime.timedelta) 可以由两个时间戳做计算得到,默认时间差的单位是天,可以和一个时间戳做计算\n"),a("ul",[a("li",[v._v("生成一个时间差: datetime.timedelta(天,秒)")])])])]),v._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),a("p",[v._v("将一个字符串转化成一个时间 from dateutil.parser import parse\n使用 parse(字符串) 方法,会将指定字符串转化成一个可读的时间(不支持中文) 支持 / - 空格 英文")])])])}],!1,null,null,null);i.default=e.exports}}]);